---
import { getUserOrUpdateAtom, fetchUserInfoInSchool, manageCookies } from "../components/specific-page/my-school-page/script.ts";
import Layout from "../layouts/Layout.astro"
import { savePathThenReturn } from "../lib/utils.ts"
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
import AccesToMySchools from "../components/specific-page/my-school-page/AccesToMySchools";
import { allIds, iniciarSesion } from "../constants/constants";
import MenuWebComponent from "../components/reutilizables/MenuWebComponent.astro";
import MainRenderer from "../components/specific-page/my-school-page/MainRenderer.tsx";
import ToastContainer from "../components/common/toast/ToastContainer"
import type { SchoolAPIResponse } from "../types/school.ts"


const user = await getUserOrUpdateAtom(Astro.cookies)
if(!user){
  const pathname = Astro.url.pathname;
  savePathThenReturn(pathname, Astro.cookies)
  return Astro.redirect(iniciarSesion);
}

console.log("myuid", user.uid)
manageCookies(Astro.cookies, user.uid);

const searchParams = Astro.url.searchParams.get("escuela");
console.log("params", searchParams)

const data = await fetchUserInfoInSchool(user?.uid, Astro.cookies, searchParams);
if(data.status !== 200){
        if(data.status === 400){
//           Si UID es incorrecta, se lo lleva a iniciar sesion nuevamente 
const pathname = Astro.url.pathname;
savePathThenReturn(pathname, Astro.cookies)
return Astro.redirect(iniciarSesion);
  } 
}


const result = await data?.json();
const apiData: SchoolAPIResponse = result;
console.log("APIDATA-", apiData.school.id, apiData.school.name)

// This reads all ids registered by the user in cookies
const schoolCookiesString = Astro.cookies.get(allIds)?.value || "[]";

const schoolCookies: { id: number; name: string }[] = JSON.parse(schoolCookiesString);
console.log("AllIdsCookies", schoolCookies)

const steps = {
  "1": {
        completed: apiData.steps.formStep.isCompleted,
        title: "Completar formulario",
        abreviature: "form"
      },
      "2": {
        completed: apiData.steps.paymentStep.isCompleted,
        title: "Pago y Notificación",
        abreviature: "payment"
      },
      "3": {
        completed: apiData.steps.deliverStep.isCompleted,
        title: "Entrega",
        abreviature: "deliver"}
}

---

<Layout title="Mis escuelas">
    <div class="flex flex-1">
      <ToastContainer client:load />
        <aside id="my-school-aside" class="flex-initial relative bg-slate-50 space-y-10 group w-28 hover:w-60 transition-all duration-100 flex flex-col"> <!-- ASIDE -->
        <div class="flex flex-col px-2 py-4 justify-between">
          <div class="flex justify-center">
              <Image 
              src={apiData.school.image.imgUrl} 
              alt={apiData.school.image.imgAlt}
              decoding={"async"} 
              width={115} 
              height={115} 
              loading={"lazy"}
              />
            </div>     

          <div id="more-schools-menu" class="w-full h-auto hidden">
              <AccesToMySchools client:visible schoolCookies={schoolCookies} />
          </div>
          <button id="my-school-aside-button" class="flex justify-center duration-200 transition-transform">
            <Icon
            id="aside-chevron-down"
            name={"chevron-down"}
            size={30}
            color={"gray"}
            />
          </button>
        </div> <!-- HEADER DEL ASIDE -->
          
          <nav>
            <ul class="flex flex-col px-2 space-y-4">
           {Object.values(steps).map((item, index) => (
            <li>
              <div data-render={item.abreviature} class="flex justify-center group-hover:justify-between font-Comfortaa">
                <a href="#" class="hidden hover:underline group-hover:block">
                  {item.title}
                </a>
                <button class:list={["w-12 h-12 group-hover:w-8 group-hover:h-8 flex items-center justify-center text-white font-bold text-sm rounded-full", {
                  "bg-green-500": item.completed,
                  "bg-red-500": !item.completed
                }
              ]}>
                  {index + 1}
                </button>
              </div>
              </li>
          ))}

            </ul>
          </nav>
          <div class="px-2 flex-1 flex-col flex justify-end">

  <MenuWebComponent extraButtonStyles="w-full" position="center" heigth={300} width={300}>
    <div slot="open-btn" class="flex items-center justify-center group-hover:justify-between">
      <h3 class="hidden hover:underline group-hover:block font-Comfortaa cursor-pointer">
        Invitar gente
      </h3>
      <Icon name="add-people" size={35} color="gray"/>
    </div>

  <div slot="content" class="flex flex-col justify-around p-10 font-Comfortaa">

    <h3>Código de invitación</h3>
    <div>
      QRJIFJSI
      <span>
        ICONO DE COPIAR TXT
      </span>
    </div>
    
<div class="flex justify-between gap-5">
  <button>
    Mostrar QR
  </button>

  <span>
    ICON QR
  </span>
</div>
  </div>

</MenuWebComponent>
            <button data-render="config" class="flex items-center justify-center group-hover:justify-between">
              <h3 class="hidden hover:underline group-hover:block font-Comfortaa cursor-pointer">
                Configuraciones
              </h3>
                <Icon name="config" size={35} color="gray"/>
            </button>
          </div> 
      
        </aside>
      
<div class="flex justify-between flex-1 relative"> <!-- Contenedor principal -->

  <!-- MAIN CONTENT -->
  <MainRenderer 
  steps={apiData?.steps}
  schoolId={apiData?.school.id}
  client:load 
  />
  <!--              -->
  
  <!-- ASIDE DERECHO -->

  <div id="sketch-menu" class="
  border-l border-slate-300 h-full bg-slate-100
  lg:static lg:w-72
  absolute right-0 top-0 w-10
  "> 
<button id="sketch-button" class="absolute -rotate-90 lg:hidden bottom-1/2 transition-transform duration-100">
      <Icon name="chevron-up" size={35} color="black" />
</button>
    <div id="sketch-submenu" class="space-y-1 py-5 px-5 hidden items-center flex-col lg:block">
      <h3 class="text-xl font-Comfortaa text-center">
        Nuestro pedido
      </h3>
     <!--  <Image 
      src={school.order.shirt.imgUrl || errorImg} 
      alt={school.order.shirt.imgAlt}
      decoding={"async"}
      width={300} 
      height={300}
      loading={"lazy"} 
      />
      <Image 
      src={school.order.jacket.imgUrl || errorImg} 
      alt={school.order.jacket.imgAlt}
      decoding={"async"} 
      height={300}
      width={300}
      loading={"lazy"}
      /> -->
    </div>
  </div>
  </div>

      </div>
    </Layout>
    <script>
      const aside = document.getElementById("my-school-aside");
      const moreSchoolMenu = document.getElementById("more-schools-menu");
      const moreSchoolButton = document.getElementById("my-school-aside-button");

      const sketchMenu = document.getElementById("sketch-menu");
      const sketchSubMenu = document.getElementById("sketch-submenu");
      const sketchButton = document.getElementById("sketch-button");

      const closeSketchMenuWidth = 10
      const openSketchMenuWidth = "full"

      const dataRenderLinks = document.querySelectorAll("[data-render]");
      const searchParamName = "busq"

      if(dataRenderLinks){
        dataRenderLinks.forEach(button => {
          const dataRenderValue = button.getAttribute("data-render") || "default";
          
          button.addEventListener("click", () => {
            const url = new URL(window.location.href);
            url.searchParams.set(searchParamName, dataRenderValue);
            window.history.pushState({}, "", url.toString());
          })
        })
      }

      if(sketchMenu && sketchSubMenu && sketchButton){
        sketchButton.addEventListener("click", () => {

          if(sketchMenu.classList.contains(`w-${closeSketchMenuWidth}`)){

            sketchMenu.classList.replace(`w-${closeSketchMenuWidth}`, `w-${openSketchMenuWidth}`)
            sketchSubMenu.classList.replace("hidden", "flex");
            sketchButton.classList.replace("-rotate-90", "rotate-90")
          
          } else {
            sketchMenu.classList.replace(`w-${openSketchMenuWidth}`, `w-${closeSketchMenuWidth}`)
            sketchSubMenu.classList.replace("block", "hidden");
            sketchButton.classList.replace("rotate-90", "-rotate-90")
          }
        })
      }
      
      if (aside && moreSchoolMenu && moreSchoolButton) {
          aside.addEventListener("mouseleave", () => {
              moreSchoolMenu.classList.add("hidden");
              moreSchoolButton.style.transform = "rotate(0deg)";
              moreSchoolButton.dataset.rotation = "0";
          });
    
          moreSchoolButton.addEventListener("click", () => {
              let rotation = moreSchoolButton.dataset.rotation || 0;
              rotation = (parseInt(rotation.toString()) + 180) % 360;
              moreSchoolButton.style.transform = `rotate(${rotation}deg)`;
              moreSchoolButton.dataset.rotation = rotation.toString();
    
              moreSchoolMenu.classList.toggle("hidden");
          });
      }
    </script>